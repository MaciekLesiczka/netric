using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.NetricInterceptWebNavigationTiming;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class NetricInterceptWebNavigationTimingTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Netric.Intercept.Web.NavigationTiming";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x166e1a2d), unchecked((short) 0x9d1f), unchecked((short) 0x59df), 0x7b, 0x93, 0x07, 0x9b, 0x2e, 0x7e, 0x1f, 0x7c);
        public enum Keywords : long
        {
            Session3 = 0x100000000000,
            Session2 = 0x200000000000,
            Session1 = 0x400000000000,
            Session0 = 0x800000000000,
        };

        public NetricInterceptWebNavigationTimingTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<EventSourceMessageArgs> EventSourceMessage
        {
            add
            {
                source.RegisterEventTemplate(EventSourceMessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, ProviderGuid);
            }
        }
        public event Action<StatisticsArgs> Statistics
        {
            add
            {
                source.RegisterEventTemplate(StatisticsTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private EventSourceMessageArgs EventSourceMessageTemplate(Action<EventSourceMessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EventSourceMessageArgs(action, 0, 65534, "EventSourceMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private StatisticsArgs StatisticsTemplate(Action<StatisticsArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new StatisticsArgs(action, 1, 65533, "Statistics", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[2];
                templates[0] = EventSourceMessageTemplate(null);
                templates[1] = StatisticsTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.NetricInterceptWebNavigationTiming
{
    public sealed class EventSourceMessageArgs : TraceEvent
    {
        public string message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal EventSourceMessageArgs(Action<EventSourceMessageArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EventSourceMessageArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "message", message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EventSourceMessageArgs> m_target;
        #endregion
    }
    public sealed class StatisticsArgs : TraceEvent
    {
        public string Url { get { return GetUnicodeStringAt(0); } }
        public long Network { get { return GetInt64At(SkipUnicodeString(0)); } }
        public long Server { get { return GetInt64At(SkipUnicodeString(0)+8); } }
        public long Browser { get { return GetInt64At(SkipUnicodeString(0)+16); } }
        public long Time { get { return GetInt64At(SkipUnicodeString(0)+24); } }
        public string Site { get { return GetUnicodeStringAt(SkipUnicodeString(0)+32); } }
        public string Id { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0)+32)); } }

        #region Private
        internal StatisticsArgs(Action<StatisticsArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+32))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+32))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<StatisticsArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Url", Url);
             XmlAttrib(sb, "Network", Network);
             XmlAttrib(sb, "Server", Server);
             XmlAttrib(sb, "Browser", Browser);
             XmlAttrib(sb, "Time", Time);
             XmlAttrib(sb, "Site", Site);
             XmlAttrib(sb, "Id", Id);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Url", "Network", "Server", "Browser", "Time", "Site", "Id"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Url;
                case 1:
                    return Network;
                case 2:
                    return Server;
                case 3:
                    return Browser;
                case 4:
                    return Time;
                case 5:
                    return Site;
                case 6:
                    return Id;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<StatisticsArgs> m_target;
        #endregion
    }
}
